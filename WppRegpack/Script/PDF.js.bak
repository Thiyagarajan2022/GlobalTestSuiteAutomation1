//USEUNIT ExcelUtils
//USEUNIT ValidationUtils
//USEUNIT WorkspaceUtils
//USEUNIT EnvParams
//USEUNIT ReportUtils
//USEUNIT PdfUtils
var excelName = EnvParams.getEnvironment();
var sheetName = "Invoice";
var Job = [];
var invoices = [];

function validateMPL(){
   var docObj;
   values = SOXexcel(sheetName,1);
   docObj = PdfUtils.getPDFDocument(values[1]);
   var txtbj = PdfUtils.getTextFromPDF(docObj);
   ValidationUtils.verify(txtbj.contains("Job No: "+values[2]),true,"Job Number is available");
   ValidationUtils.verify(txtbj.contains("Job Name: "+values[3]),true,"Job Name is available");
   invoices = excel(sheetName,2);

  var count = 0;
  for(var i=0;i<invoices.length;i++){    
    if(textobj.getText_2(docObj).contains(invoices[i])){ 
      count++;
    }
  }
  if(count==invoices.length)
  ValidationUtils.verify(true,true,"Invoice details are available in PDF");
  else
  ValidationUtils.verify(true,false,"Invoice details are Not-available in PDF");
   Log.debug("Invoice List: "+invoices[i]);
}

function loadDocument()
{
  var docObj;

  // Load the PDF file to the PDDocument object
  Job = SOXexcel(sheetName,1);
  docObj = JavaClasses.org_apache_pdfbox_pdmodel.PDDocument.load_3(Project.Path+"\\"+Job[0]+"\\"+Job[1]+".pdf");

  var textobj = JavaClasses.org_apache_pdfbox_util.PDFTextStripper.newInstance();
  
  Log.Message( "hi:"+textobj.getText_2(docObj)); 
  
  Log.Message("Job No: "+Job[2]);
  


}

function vv(){ 
  var docObj;

  // Load the PDF file to the PDDocument object
  docObj = JavaClasses.org_apache_pdfbox_pdmodel.PDDocument.load_3("C:\\Users\\674087\\Downloads\\p_jobinvoice-3.pdf");
  Job = SOXexcel(sheetName,1);
  var textobj = JavaClasses.org_apache_pdfbox_util.PDFTextStripper.newInstance();
  
  Log.Message( "hi:"+textobj.getText_2(docObj)); 
//try{ 
  Log.Message("Job No: "+Job[0]);
  if(textobj.getText_2(docObj).contains("Job No: "+Job[0])){ 
      ValidationUtils.verify(true,true,"Job Number is available");
  } else{ 
   ValidationUtils.verify(true,false,"Job Number is Not-available in PDF"); 
  }
  
  Log.Message("Job Name: "+Job[1]);
  if(textobj.getText_2(docObj).contains("Job Name: "+Job[1])){ 
    ValidationUtils.verify(true,true,"Job Name is available");
  }
  else{ 
   ValidationUtils.verify(true,false,"Job Name is Not-available in PDF"); 
  }
  invoices = excel(sheetName,2);

  var count = 0;
  for(var i=0;i<invoices.length;i++){ 
    Log.Message("Invoice List: "+invoices[i]);
    if(textobj.getText_2(docObj).contains(invoices[i])){ 
      count++;
    }
  }
  if(count==invoices.length)
  ValidationUtils.verify(true,true,"Invoice details are available in PDF");
  else
  ValidationUtils.verify(true,false,"Invoice details are Not-available in PDF");
  
//  }
//catch(e){ 
//Log.Message("catch")
//  Log.Message(e);
//}
}


function SOXexcel(CreateClient,start){ 
var Arrayss = []; 
var xlDriver = DDT.ExcelDriver(Project.Path+excelName, sheetName, true);
var id =0;
var colsList = [];

   for(var idx=0;idx<DDT.CurrentDriver.ColumnCount;idx++){   
     colsList[idx] = DDT.CurrentDriver.ColumnName(idx);
   }
//   xlDriver.Next();
     while (!DDT.CurrentDriver.EOF()) {
      
      var temp ="";
       if(xlDriver.Value(colsList[start])!=null){
      temp = temp+xlDriver.Value(start).toString().trim();
      }
      else{ 
        temp = temp;
      }
     Arrayss[id]=temp;
//     Log.Message(temp);
     id++;     
     xlDriver.Next();
     }
     DDT.CloseDriver(xlDriver.Name);
return Arrayss;
}


function excel(CreateClient,start){ 

var Arrayss = [];
var xlDriver = DDT.ExcelDriver(Project.Path+excelName, sheetName, true);
var id =0;
var colsList = [];
//Log.Message(DDT.CurrentDriver.ColumnCount);
   for(var idx=0;idx<DDT.CurrentDriver.ColumnCount;idx++){   
     colsList[idx] = DDT.CurrentDriver.ColumnName(idx);
   }
//   xlDriver.Next();

     while (!DDT.CurrentDriver.EOF()) {
     var temp ="";
      for(var idx=start;idx<colsList.length;idx++){  
       if(xlDriver.Value(colsList[idx])!=null){
      temp = temp+xlDriver.Value(colsList[idx]).toString().trim();
      if(idx!=colsList.length-1)
      temp = temp+" ";
      }
      else{ 
        temp = temp+" ";
      }
      }
     if(temp.length!=6){
     Arrayss[id]=temp;
//     Log.Message(temp)
     }
     id++;     
     xlDriver.Next();
     }
     DDT.CloseDriver(xlDriver.Name);
     return Arrayss;
}
