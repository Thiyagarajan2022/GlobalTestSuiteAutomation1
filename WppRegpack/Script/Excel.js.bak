//USEUNIT ExcelUtils
//USEUNIT ValidationUtils
//USEUNIT WorkspaceUtils
//USEUNIT EnvParams
//USEUNIT ReportUtils
//USEUNIT PdfUtils
var excelName = EnvParams.getEnvironment();
var sheetName = "MPLValidation";
var temporary="";
var JobName_strIndex;  
var ExcelDetails = [];
var JobNo = "";
var Job_group ="";
var Job_Type ="";
var department ="";
var buss_unit = "";
var TemplateNo ="";
var Product ="";
var Product_name ="";
var Client ="";
var Client_Name ="";
var Brand ="";
var Brand_Name ="";
var Job_name="";
var Project_manager ="";


function SOXexcel(sheetName,start){ 
var Arrayss = []; 
var xlDriver = DDT.ExcelDriver(Project.Path+excelName, sheetName, true);
var id =0;
var colsList = [];

   for(var idx=0;idx<DDT.CurrentDriver.ColumnCount;idx++){   
     colsList[idx] = DDT.CurrentDriver.ColumnName(idx);
   }
//   xlDriver.Next();
     while (!DDT.CurrentDriver.EOF()) {
      
      var temp ="";
       if(xlDriver.Value(colsList[start])!=null){
      temp = temp+xlDriver.Value(start).toString().trim();
      }
      else{ 
        temp = temp;
      }
     Arrayss[id]=temp;
//     Log.Message(temp);
     id++;     
     xlDriver.Next();
     }
     DDT.CloseDriver(xlDriver.Name);
return Arrayss;
}



/*


function excel(){ 

var Arrayss = [];
var xlDriver = DDT.ExcelDriver(Project.Path+"\\DataTables"+"\\Job_Detail - 1707200094.xlsx", "Job Detail", true);
var id =0;
var colsList = [];
//Log.Message(DDT.CurrentDriver.ColumnCount);
   xlDriver.Next();
   xlDriver.Next();
   for(var idx=0;idx<xlDriver.ColumnCount;idx++){   
     colsList[idx] = xlDriver.ColumnName(idx);
//  Log.Message(colsList[idx]);   
   }
//   xlDriver.Next();

     while (!DDT.CurrentDriver.EOF()) {
     Log.Message( colsList.length );
     var temp ="";
      for(var idx=0;idx<colsList.length;idx++){  
       if(xlDriver.Value(colsList[idx])!=null){
      temp = temp+xlDriver.Value(colsList[idx]).toString().trim()+"*";
//      if(idx!=colsList.length-1)
//      temp = temp+"*";
      }
      else{ 
        temp = temp+"*";
      }
      }
     if(temp.length!=6){
     Arrayss[id]=temp;
//     Log.Message(temp)
     }
     id++;     
     xlDriver.Next();
     }
     DDT.CloseDriver(xlDriver.Name);
     return Arrayss;
}



function getExcelData(){
    excelData =[];  
    var colsList = [];
    var xlDriver = DDT.ExcelDriver(Project.Path+"\\DataTables"+"\\Job_Detail - 1707200094.xlsx","Job Detail", true)
    for(var idx=0;idx<DDT.CurrentDriver.ColumnCount;idx++){   
     colsList[idx] = DDT.CurrentDriver.ColumnName(idx);
   }
    var data = "";
    var i = 0;
    while (!DDT.CurrentDriver.EOF()) {
    data = "";
    for(var idx=0;idx<colsList.length;idx++){ 
    try{
       data = data + xlDriver.Value(colsList[idx]).toString().trim() + "*";
       excelData[i] = data;
       
       }
       catch(err)
       {
       data = data +"*";
       excelData[i] = data;
       }
       
       }
      // Log.Message("EXCELDATA :"+excelData[i]);      
       i++;
     xlDriver.Next();
    }
    
    DDT.CloseDriver(xlDriver.Name);
   // Log.Message("completed reading excel data, data length::"+excelData.length);
    return excelData;
  
}


*/

var RecNo;
var JobDetails = "";
var CostFees = [];
var Estimate = [];
var Billing = [];
var Summary = [];
var jobStatus = 0;
// Posts data to the log (helper routine)
function ProcessData()
 {
  var Fldr, i;
  
//  Fldr = Log.CreateFolder("Record: " + aqConvert.VarToStr(RecNo));
//  Log.PushLogFolder(Fldr);
var temp = "";  
  for(i = 0; i < DDT.CurrentDriver.ColumnCount; i++){ 
//    Log.Message(DDT.CurrentDriver.ColumnName(i) + ": " + aqConvert.VarToStr(DDT.CurrentDriver.Value(i)));
temp = temp+aqConvert.VarToStr(DDT.CurrentDriver.Value(i));
}
//Log.Message(temp);

if(temp.indexOf("Costs & Fees")==0){ 
  jobStatus = 1;
  RecNo = 0;
}
if(temp.indexOf("Estimate History")==0){ 
  jobStatus = 2;
  RecNo = 0;
}
if(temp.indexOf("Billing")==0){ 
  jobStatus = 3;
  RecNo = 0;
}
if(temp.indexOf("Summary")==0){ 
  jobStatus = 4;
  RecNo = 0;
}


if(jobStatus==0){
//  temporary="";
  var temporary1="";
//  JobName_strIndex;
  var JobName_EndIndex;
if(RecNo==2){ 
  temporary = temp;
  JobName_strIndex = temp.indexOf("Client Name");
  Log.Message(JobName_strIndex)
}
else if(RecNo==3){ 
  temporary1 = temp;
  JobName_EndIndex = temp.indexOf("Brand Code");
  if(JobName_EndIndex==0){ 
    JobDetails = JobDetails+temporary+temporary1;
  }
  if(JobName_EndIndex>0){ 
    Log.Message(temporary)
    Log.Message(JobName_strIndex);
    Log.Message(temporary.substring(0,JobName_strIndex));
    Log.Message(temporary1.substring(0,JobName_EndIndex));
    Log.Message(temporary.substring(JobName_strIndex));
    Log.Message(temporary1.substring(JobName_EndIndex));
    JobDetails = JobDetails+temporary.substring(0,JobName_strIndex)+temporary1.substring(0,JobName_EndIndex)+temporary.substring(JobName_strIndex)+temporary1.substring(JobName_EndIndex);
  }
}
else{ 
 JobDetails = JobDetails+temp; 
}
}
if(jobStatus==1){
CostFees[RecNo] = temp;
}
if(jobStatus==2){
Estimate[RecNo] = temp;
}
if(jobStatus==3){
Billing[RecNo] = temp;
}
if(jobStatus==4){
Summary[RecNo] = temp;
}










// Log.Message(temp); 
//  Log.PopLogFolder(); 
  RecNo = RecNo + 1; 
 }
  
// Creates the driver (main routine)
function TestDriver()
 {
  var Driver;
  
  // Creates the driver
  // If you connect to an Excel 2007 sheet, use the following method call:
  // Driver = DDT.ExcelDriver("C:\\MyFile.xlsx", "Sheet1", true);
  Driver = DDT.ExcelDriver(Project.Path+"\\DataTables"+"\\Job_Detail - 1707200094.xlsx", "Job Detail"); 
  
  // Iterates through records
  RecNo = 0;
  while (! Driver.EOF() ) 
  {
    ProcessData(); // Processes data
    Driver.Next(); // Goes to the next record
  }
  
  // Closing the driver
  DDT.CloseDriver(Driver.Name);
  ExcelDetails = SOXexcel(sheetName,1);
//  for(var i=0;i<JobDetails.length;i++){ 
    Log.Message(JobDetails);
//  }
  Log.Message(ExcelDetails[0]);
  ValidationUtils.verify(JobDetails.indexOf("Job No."+ExcelDetails[0])!=-1,true,"Job Number is available");
  Log.Message(Job_group);
//  ValidationUtils.verify(JobDetails.indexOf(ExcelDetails[1])!=-1,true,"Job Group is available");
  Log.Message(Job_Type);
  ValidationUtils.verify(JobDetails.indexOf("Job Type"+ExcelDetails[2])!=-1,true,"Job_Type is available");
  Log.Message(department);
//  ValidationUtils.verify(JobDetails.indexOf(ExcelDetails[3])!=-1,true,"Department is available");
  Log.Message(buss_unit);
//  ValidationUtils.verify(JobDetails.indexOf(ExcelDetails[4])!=-1,true,"Business Unit is available");
  Log.Message("Product Code"+ExcelDetails[6]);
  ValidationUtils.verify(JobDetails.indexOf("Product Code"+ExcelDetails[6])!=-1,true,"Product Number is available");
  Log.Message("Product Name"+ExcelDetails[7]);
  ValidationUtils.verify(JobDetails.indexOf("Product Name"+ExcelDetails[7])!=-1,true,"Product Name is available");
  Log.Message("Client Code"+ExcelDetails[8]);
  ValidationUtils.verify(JobDetails.indexOf("Client Code"+ExcelDetails[8])!=-1,true,"Client Number is available");
  Log.Message("Client Name"+ExcelDetails[9]);
  ValidationUtils.verify(JobDetails.indexOf("Client Name"+ExcelDetails[9])!=-1,true,"Client Name is available");
  Log.Message("Brand Code"+ExcelDetails[10]);
  ValidationUtils.verify(JobDetails.indexOf("Brand Code"+ExcelDetails[10])!=-1,true,"Brand Number is available");
  Log.Message("Brand Name"+ExcelDetails[11]);
  ValidationUtils.verify(JobDetails.indexOf("Brand Name"+ExcelDetails[11])!=-1,true,"Brand Name is available");
  Log.Message("Project Manager"+ExcelDetails[13]);
  ValidationUtils.verify(JobDetails.indexOf("Project Manager"+ExcelDetails[13])!=-1,true,"Project Manager Number is available");
  Log.Message("Job"+ExcelDetails[12]);
  ValidationUtils.verify(JobDetails.indexOf("Job"+ExcelDetails[12])!=-1,true,"Job Name is available");
  
  
  Log.Message("==========================================================================");
  for(var i=0;i<CostFees.length;i++){ 
    Log.Message(CostFees[i]);
  }
  Log.Message("==========================================================================");
  for(var i=0;i<Estimate.length;i++){ 
    Log.Message(Estimate[i]);
  }
  Log.Message("==========================================================================");
  for(var i=0;i<Billing.length;i++){ 
    Log.Message(Billing[i]);
  }
  Log.Message("==========================================================================");
  for(var i=0;i<Summary.length;i++){ 
    Log.Message(Summary[i]);
  }
  Log.Message("==========================================================================");
  
	}
  
  
  